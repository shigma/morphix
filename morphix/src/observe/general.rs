use std::marker::PhantomData;
use std::ops::{Deref, DerefMut, Index, IndexMut};

use serde::Serialize;

use crate::helper::Assignable;
use crate::{Adapter, Mutation, MutationKind, Observer};

/// A handler trait for implementing change detection strategies in [`GeneralObserver`].
///
/// `GeneralHandler` defines the interface for pluggable change detection strategies used
/// exclusively with `GeneralObserver`. Each handler implementation encapsulates a specific approach
/// to detecting whether a value has changed.
///
/// ## Lifecycle
///
/// - [`on_observe`](GeneralHandler::on_observe) - Called once when observation begins
/// - [`on_deref_mut`](GeneralHandler::on_deref_mut) - Called each time the value is accessed via
///   [`DerefMut`]
/// - [`on_collect`](GeneralHandler::on_collect) - Called once to determine if a change occurred
///
/// ## Example
///
/// A [`ShallowObserver`](super::ShallowObserver) implementation that treats any mutation through
/// [`DerefMut`] as a complete replacement:
///
/// ```
/// # use morphix::observe::{GeneralHandler, GeneralObserver};
/// #[derive(Default)]
/// struct ShallowHandler {
///     mutated: bool,
/// }
///
/// impl<T> GeneralHandler<T> for ShallowHandler {
///     fn on_observe(_value: &mut T) -> Self {
///         Self { mutated: false }
///     }
///
///     fn on_deref_mut(&mut self) {
///         self.mutated = true;
///     }
///
///     fn on_collect(&self, _value: &T) -> bool {
///         self.mutated
///     }
/// }
///
/// type ShallowObserver<'i, T> = GeneralObserver<'i, T, ShallowHandler>;
/// ```
pub trait GeneralHandler<T> {
    /// Called when observation begins.
    fn on_observe(value: &mut T) -> Self;

    /// Called when the value is accessed through [`DerefMut`].
    fn on_deref_mut(&mut self);

    /// Called when collecting changes, returns whether a change occurred.
    fn on_collect(&self, value: &T) -> bool;
}

/// A general-purpose [`Observer`] implementation with extensible change detection strategies.
///
/// `GeneralObserver` provides a flexible framework for implementing different change detection
/// strategies through the [`GeneralHandler`] trait. It serves as the foundation for several
/// built-in observer types.
///
/// ## Capabilities and Limitations
///
/// `GeneralObserver` can:
/// - Detect whether a value has changed via [`DerefMut`]
/// - Produce [`Replace`](MutationKind::Replace) mutations when changes are detected
///
/// `GeneralObserver` cannot:
/// - Track [`Append`](MutationKind::Append) mutations
/// - Track field-level changes
/// - Add specialized implementations for common traits (e.g. [`PartialEq`], [`Index`], etc.)
///
/// For types that benefit from more sophisticated change tracking, morphix provides specialized
/// observer implementations. These include built-in support for [`String`] and [`Vec`] (which can
/// track append operations), as well as custom observers generated by `#[derive(Observe)]` (which
/// can track field-level changes).
///
/// ## Built-in Implementations
///
/// The following observer types are built on `GeneralObserver`:
///
/// - [`ShallowObserver`](super::ShallowObserver) - Tracks any [`DerefMut`] access as a change
/// - [`NoopObserver`](super::NoopObserver) - Ignores all changes
/// - [`HashObserver`](super::HashObserver) - Compares hash values to detect changes
/// - [`SnapshotObserver`](super::SnapshotObserver) - Compares cloned snapshots to detect changes
pub struct GeneralObserver<'i, T, H> {
    ptr: *mut T,
    handler: H,
    phantom: PhantomData<&'i mut T>,
}

impl<'i, T, H: Default> Default for GeneralObserver<'i, T, H> {
    #[inline]
    fn default() -> Self {
        Self {
            ptr: std::ptr::null_mut(),
            handler: H::default(),
            phantom: PhantomData,
        }
    }
}

impl<'i, T, H> Deref for GeneralObserver<'i, T, H> {
    type Target = T;

    #[inline]
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.ptr }
    }
}

impl<'i, T, H: GeneralHandler<T>> DerefMut for GeneralObserver<'i, T, H> {
    fn deref_mut(&mut self) -> &mut Self::Target {
        self.handler.on_deref_mut();
        unsafe { &mut *self.ptr }
    }
}

impl<'i, T, H: GeneralHandler<T>> Assignable for GeneralObserver<'i, T, H> {}

impl<'i, T, H: GeneralHandler<T>> Observer<'i> for GeneralObserver<'i, T, H> {
    fn inner(this: &Self) -> *mut Self::Target {
        this.ptr
    }

    #[inline]
    fn observe(value: &'i mut T) -> Self {
        Self {
            ptr: value as *mut T,
            handler: H::on_observe(value),
            phantom: PhantomData,
        }
    }

    unsafe fn collect_unchecked<A: Adapter>(this: Self) -> Result<Option<Mutation<A>>, A::Error>
    where
        T: Serialize,
    {
        Ok(if this.handler.on_collect(&*this) {
            Some(Mutation {
                path_rev: vec![],
                operation: MutationKind::Replace(A::serialize_value(&*this)?),
            })
        } else {
            None
        })
    }
}

impl<'i, T: Index<U>, H: GeneralHandler<T>, U> Index<U> for GeneralObserver<'i, T, H> {
    type Output = T::Output;

    #[inline]
    fn index(&self, index: U) -> &Self::Output {
        (**self).index(index)
    }
}

impl<'i, T: IndexMut<U>, H: GeneralHandler<T>, U> IndexMut<U> for GeneralObserver<'i, T, H> {
    #[inline]
    fn index_mut(&mut self, index: U) -> &mut Self::Output {
        (**self).index_mut(index)
    }
}

impl<'i, T: PartialEq<U>, H, U: ?Sized> PartialEq<U> for GeneralObserver<'i, T, H> {
    #[inline]
    fn eq(&self, other: &U) -> bool {
        (**self).eq(other)
    }
}

impl<'i, T: PartialOrd<U>, H, U: ?Sized> PartialOrd<U> for GeneralObserver<'i, T, H> {
    #[inline]
    fn partial_cmp(&self, other: &U) -> Option<std::cmp::Ordering> {
        (**self).partial_cmp(other)
    }
}

macro_rules! impl_assign_ops {
    ($($trait:ident => $method:ident),* $(,)?) => {
        $(
            impl<'i, T: ::std::ops::$trait<U>, H: GeneralHandler<T>, U> ::std::ops::$trait<U> for GeneralObserver<'i, T, H> {
                #[inline]
                fn $method(&mut self, rhs: U) {
                    (**self).$method(rhs);
                }
            }
        )*
    };
}

impl_assign_ops! {
    AddAssign => add_assign,
    SubAssign => sub_assign,
    MulAssign => mul_assign,
    DivAssign => div_assign,
    RemAssign => rem_assign,
    BitAndAssign => bitand_assign,
    BitOrAssign => bitor_assign,
    BitXorAssign => bitxor_assign,
    ShlAssign => shl_assign,
    ShrAssign => shr_assign,
}

macro_rules! impl_ops_copy {
    ($($trait:ident => $method:ident),* $(,)?) => {
        $(
            impl<'i, T: Copy + ::std::ops::$trait<U>, H, U> ::std::ops::$trait<U> for GeneralObserver<'i, T, H> {
                type Output = T::Output;

                #[inline]
                fn $method(self, rhs: U) -> Self::Output {
                    (*self).$method(rhs)
                }
            }
        )*
    };
}

impl_ops_copy! {
    Add => add,
    Sub => sub,
    Mul => mul,
    Div => div,
    Rem => rem,
    BitAnd => bitand,
    BitOr => bitor,
    BitXor => bitxor,
    Shl => shl,
    Shr => shr,
}

impl<'i, T: Copy + ::std::ops::Neg, H> ::std::ops::Neg for GeneralObserver<'i, T, H> {
    type Output = T::Output;

    #[inline]
    fn neg(self) -> Self::Output {
        (*self).neg()
    }
}

impl<'i, T: Copy + ::std::ops::Not, H> ::std::ops::Not for GeneralObserver<'i, T, H> {
    type Output = T::Output;

    #[inline]
    fn not(self) -> Self::Output {
        (*self).not()
    }
}
